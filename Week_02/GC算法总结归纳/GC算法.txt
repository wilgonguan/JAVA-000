JVM GC 垃圾回收器类型
JVM的垃圾回收器大致分为七种类型：
1)串行：垃圾回收器 (Serial Garbage Collector)
	a)串行垃圾回收器在进行垃圾回收时，所有应用程序线程将不会运行，并且其使用单个垃圾回收线程来进行垃圾回收工作,为单线程环境而设计的,这在以前单核CPU时代是可以接受的。
	b)使用方法：-XX:+UseSerialGC
2)串行：ParNew收集器
	a)ParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩;
	b)使用方法：-XX:+UseParNewGC
3)并行：Parallel收集器
	a)Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；
	  也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩;
	b)使用方法：-XX:+UseParallelGC  
4)并行：Parallel Old 收集器
	a)Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供
	b)使用方法： -XX:+UseParallelOldGC
5)并发标记扫描CMS收集器
	a)CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器;
	b)它的运作过程相对于前面几种收集器来说要更复杂一些,分为多个阶段，有的阶段可以和应用线程并发执行，以缩短暂停时间。
6) G1收集器
	a)与CMS收集器相比G1收集器有以下特点：
		空间整合，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。
		可预测停顿，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。
	b)上面提到的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，
	  但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region的集合。
    c) G1的新生代收集跟ParNew类似，当新生代占用达到一定比例的时候，开始出发收集。和CMS类似，G1收集器收集老年代对象会有短暂停顿。
7) ZGC JDK11引入
	a)还在实验阶段，不建议在生产环境使用
	b)ZGC的设计目标是：支持TB级内存容量，暂停时间低（<10ms），对整个程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存），或压缩堆。